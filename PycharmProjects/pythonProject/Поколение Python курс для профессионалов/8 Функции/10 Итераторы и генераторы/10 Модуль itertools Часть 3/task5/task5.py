from itertools import *

def grouper(iterable, n):
    args = [iter(iterable)] * n
    return zip_longest(*args)


iterator = iter([1, 2, 3, 4, 5, 6, 7])

print(*grouper(iterator, 3))


# В вашем коде, при создании списка args, вы используете [iter(iterable)] * n.
# Это создает n ссылок на один и тот же итератор. Когда zip_longest обращается к этим итераторам,
# он извлекает следующий элемент из одного из них и передвигает указатель на следующий элемент.
# Так как все ссылки указывают на один и тот же итератор, он перемещается один раз,
# и поэтому значения берутся из одного и того же итератора.
#
# Чтобы исправить это, вы можете создать разные итераторы для каждого элемента в списке args.
# Например, вы можете использовать генераторное выражение:
#
#
# def grouper(iterable, n):
#     args = (iter(iterable) for _ in range(n))
#     return zip_longest(*args)