Класс описывается с помощью ключевого слова class по следующей схеме:
class <Название класса> [(<Класс1>[, ..., <КлассN>])]:
	['''Сторка документирования''']
	<Описание атрибутов и методов>


Создание определенного класса:
class MyClass:
	'''Это строка документирования'''
	print('Инструкции выполняются сразу')
input()


Доступ к методам и атрибутам класса внутри определяемого метода производится через переменную self, через точечную нотацию self.x.

Чтобы использовать методы и атрибуты класса, необходимо создать экземпляр класса:
<Экземпляр класса> = <Название класса>([<Параметры>])

При обращении к методам класса используется формат:
<Экземпляр класса>.<Имя метода>([<Параметры>])

Обращение к атрибутам класса:
<Экземпляр класса>.<Имя атрибута>

Определим класс MyClass с атрибутом x и методом print_x(), выводящим значение этого атрибута, а затем создадим экземпляр класса и вызовем метод.
class MyClass:
	def __init__(self):		# Конструктор
		self.x = 10			# Атрибут экземпляра класса
	def print_x(self):		# self - это ссылка на экземпляр класса
		print(self.x)		# Выводим значение атрибута
c = MyClass()				# Создание экземпляра класса
							# Вызываем метод print_x()
c.print_x()					# self не указывается при вызове метода
print(c.x)					# К атрибуту можно обратиться непосредственно


Функции доступа к атрибутам и методам:
getattr(<Объект>, <Атрибут>[, <Значеие по умолчанию>])
setattr(<Объект>, <Атрибут>, <Значеие>)
delattr(<Объект>, <Атрибут>)
hasattr(<Объект>, <Атрибут>)


Динамическое создание атрибутов:
class MyClass:                   # Определяем пустой класс
    pass                         
MyClass.x = 50                   # Создаем атрибут объекта класса
c1, c2, = MyClass(), MyClass()   # Создаем два экземпляра класса
c1.y = 10                        # Создаем атрибут экземпляра класса
c2.y = 20                        # Создаем атрибут экземпляра класса
print(c1.x, c1.y)                # Выведет: 50 10
print(c2.x, c2.y)                # Выведет: 50 20



class MyClass:
    x = 10                  # Атрибут объекта класса
    def __init__(self):
        self.y = 20         # Атрибут экземпляра класса

c1 = MyClass()              # Создаем экземпляр класса
c2 = MyClass()              # Создаем экземпляр класса

print(c1.x, c2.x)
MyClass.x = 88
print(c1.x, c2.x)

print(c1.y, c1.y)
c1.y = 88
print(c1.y, c1.y)

MyClass.x = 88             # Изменяем атрибут объекта класса

c1.x = 200                  # Создаем атрибут экземпляра

print(c1.x, MyClass.x)