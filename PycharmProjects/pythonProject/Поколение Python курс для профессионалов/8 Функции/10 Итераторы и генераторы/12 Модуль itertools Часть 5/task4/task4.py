from collections import namedtuple
import itertools

Item = namedtuple('Item', ['name', 'mass', 'price'])

items = [Item('Обручальное кольцо', 7, 49_000),
         Item('Мобильный телефон', 200, 110_000),
         Item('Ноутбук', 2000, 150_000),
         Item('Ручка Паркер', 20, 37_000),
         Item('Статуэтка Оскар', 4000, 28_000),
         Item('Наушники', 150, 11_000),
         Item('Гитара', 1500, 32_000),
         Item('Золотая монета', 8, 140_000),
         Item('Фотоаппарат', 720, 79_000),
         Item('Лимитированные кроссовки', 300, 80_000)]

def knapsack(items, capacity):
    n = len(items)
    # Создаем двумерный массив dp размером (n+1) x (capacity+1) и заполняем его нулями
    dp = [[0] * (capacity + 1) for _ in range(n + 1)]

    # Используем два цикла для прохода по всем предметам и массам рюкзака
    for i in range(1, n + 1):
        for j in range(capacity + 1):
            # Проверяем, можно ли положить текущий предмет в рюкзак
            if items[i - 1].mass <= j:
                # Если можно, выбираем максимум из ценности с учетом текущего предмета
                # и ценности без текущего предмета
                dp[i][j] = max(dp[i - 1][j], dp[i - 1][j - items[i - 1].mass] + items[i - 1].price)
            else:
                # Если предмет не помещается в рюкзак, берем предыдущую ценность
                dp[i][j] = dp[i - 1][j]

    # Если максимальная ценность в рюкзаке равна 0, значит, рюкзак собрать не удастся
    if dp[n][capacity] == 0:
        return ["Рюкзак собрать не удастся"]

    result = []
    i, j = n, capacity
    # Восстанавливаем ответ, начиная с конечной ячейки dp
    while i > 0 and j > 0:
        # Если значение в ячейке dp изменилось, это значит, что предмет был взят в рюкзак
        if dp[i][j] != dp[i - 1][j]:
            # Добавляем название предмета к результату и уменьшаем массу
            result.append(items[i - 1].name)
            j -= items[i - 1].mass
        i -= 1

    # Возвращаем результат в отсортированном виде
    return sorted(result)

capacity = int(input())
print(*knapsack(items, capacity), sep='\n')
