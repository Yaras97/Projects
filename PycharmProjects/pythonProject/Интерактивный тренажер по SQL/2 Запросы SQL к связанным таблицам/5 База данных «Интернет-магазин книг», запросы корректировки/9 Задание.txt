Пояснение
В таблицу step все необходимые этапы занесены последовательно. Если текущий этап «Оплата», его id 1, то у следующего этапа «Упаковка» id будет на единицу больше, то есть 2. Поэтому в условии отбора запроса, который обновляет дату начала следующего этапа, можно использовать вложенный запрос, который выбирает id этапа на 1 больше, чем у текущего:

SELECT step_id + 1 
FROM step
WHERE name_step = 'Оплата'


Задание
Завершить этап «Оплата» для заказа с номером 5, вставив в столбец date_step_end дату 13.04.2020, и начать следующий этап («Упаковка»), задав в столбце date_step_beg для этого этапа ту же дату.

Реализовать два запроса для завершения этапа и начала следующего. Они должны быть записаны в общем виде, чтобы его можно было применять для любых этапов, изменив только текущий этап. Для примера пусть это будет этап «Оплата».

	UPDATE buy_step
	SET date_step_end = IF(buy_id = 5 AND step_id = 1, '2020-04-13', date_step_end),
	    date_step_beg = IF(buy_id = 5 AND step_id = 2, '2020-04-13', date_step_beg);
	select * from buy_step;
+-------------+--------+---------+---------------+---------------+
| buy_step_id | buy_id | step_id | date_step_beg | date_step_end |
+-------------+--------+---------+---------------+---------------+
| 1           | 1      | 1       | 2020-02-20    | 2020-02-20    |
| 2           | 1      | 2       | 2020-02-20    | 2020-02-21    |
| 3           | 1      | 3       | 2020-02-22    | 2020-03-07    |
| 4           | 1      | 4       | 2020-03-06    | 2020-03-06    |
| 5           | 2      | 1       | 2020-02-28    | 2020-02-28    |
| 6           | 2      | 2       | 2020-02-29    | 2020-03-01    |
| 7           | 2      | 3       | 2020-03-02    | NULL          |
| 8           | 2      | 4       | NULL          | NULL          |
| 9           | 3      | 1       | 2020-03-05    | 2020-03-05    |
| 10          | 3      | 2       | 2020-03-05    | 2020-03-06    |
| 11          | 3      | 3       | 2020-03-06    | 2020-03-10    |
| 12          | 3      | 4       | 2020-03-11    | NULL          |
| 13          | 4      | 1       | 2020-03-20    | NULL          |
| 14          | 4      | 2       | NULL          | NULL          |
| 15          | 4      | 3       | NULL          | NULL          |
| 16          | 4      | 4       | NULL          | NULL          |
| 17          | 5      | 1       | 2020-04-12    | 2020-04-13    |
| 18          | 5      | 2       | 2020-04-13    | NULL          |
| 19          | 5      | 3       | NULL          | NULL          |
| 20          | 5      | 4       | NULL          | NULL          |
+-------------+--------+---------+---------------+---------------+


UPDATE buy_step 
      INNER JOIN step
      ON buy_step.step_id = step.step_id
SET date_step_end = '2020-04-13'
WHERE name_step ='Оплата' AND buy_id = 5;

UPDATE buy_step 
      INNER JOIN step
      ON buy_step.step_id = step.step_id
SET date_step_beg = '2020-04-13'
WHERE buy_step.step_id = (SELECT step_id + 1 FROM step WHERE name_step='Оплата') AND buy_id = 5;

Select * from buy_step
WHERE buy_id = 5;



UPDATE buy_step bs1,
       buy_step bs2
SET bs1.date_step_end = '2020-04-13',
    bs2.date_step_beg = '2020-04-13'
WHERE bs1.buy_id = 5
      AND bs2.buy_id = bs1.buy_id
      AND bs1.step_id = (SELECT step_id FROM step WHERE name_step = 'Оплата')
      AND bs2.step_id = bs1.step_id + 1;

SELECT * FROM buy_step
WHERE buy_id = 5;



