# Рассмотрим на примере реализацию композиции в Python. Пусть, требуется написать программу,
# которая вычисляет площадь обоев для оклеивания помещения. При этом окна, двери, пол и потолок
# оклеивать не надо. Прежде, чем писать программу, займемся объектно-ориентированным проектированием.
# То есть разберемся, что к чему. Комната – это прямоугольный параллелепипед, состоящий из шести прямоугольников.
# Его площадь представляет собой сумму площадей составляющих его прямоугольников. Площадь прямоугольника равна
# произведению его длины на ширину. По условию задачи обои клеятся только на стены, следовательно площади верхнего
# и нижнего прямоугольников нам не нужны. Из рисунка видно, что площадь одной стены равна xz, второй – уz.
# Противоположные прямоугольники равны, значит общая площадь четырех прямоугольников равна S = 2xz + 2уz = 2z(x+y).
# Потом из этой площади надо будет вычесть общую площадь дверей и окон, поскольку они не оклеиваются.
# Можно выделить три типа объектов – окна, двери и комнаты. Получается три класса. Окна и двери являются
# частями комнаты, поэтому пусть они входят в состав объекта-помещения.
# Для данной задачи существенное значение имеют только два свойства – длина и ширина.
# Поэтому классы "окна" и "двери" можно объединить в один. Если бы были важны другие свойства
# (например, толщина стекла, материал двери), то следовало бы для окон создать один класс,
# а для дверей – другой. Пока обойдемся одним, и все что нам нужно от него – площадь объекта:

class WinDoor:
    def __init__(self, x, y):
        self.square = x * y


class Room:
    def __init__(self, x, y, z):
        self.square = 2 * z * (x + y)
        self.wd = []

    def add_wd(self, w, h):
        self.wd.append(WinDoor(w, h))

    def work_surface(self):
        new_square = self.square
        for i in self.wd:
            new_square -= i.square
        return new_square


r1 = Room(6, 3, 2.7)
print(r1.square)  # выведет 48.6
r1.add_wd(1, 1)
r1.add_wd(1, 1)
r1.add_wd(1, 2)
print(r1.work_surface())  # выведет 44.6

