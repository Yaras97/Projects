# Может показаться, что несмотря на то, что мы не можем получить значение
# скрытого атрибута извне, мы можем присвоить ему, обратившись к его имени
# в той нотации, в которой оно используется в классе (с двумя предстоящими знаками подчеркивания)

class A:
    def __init__(self, value):
        self.__field = value


a = A(10)
# print(a.__field)    # Здесь будет ошибка

a.__field = 25
print(a.__field)    # Будет выведено 25


# На самом деле в данном примере поле экземпляра __field,
# определенное за пределами класса, – это совсем другое поле.
# Не тот __field, который находится в классе и обращаться к которому
# извне надо с помощью _Full__field. В этом можно убедиться,
# если вывести на экран содержимое атрибута __dict__:

print(a.__dict__)  # Результат:
#  {'_A__field': 10, '__field': 25}